// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalInt32 struct {
	value *int32
}

func NewOptionalInt32(v int32) OptionalInt32 {
	return OptionalInt32{value: &v}
}

func NoneOptionalInt32() OptionalInt32 {
	return OptionalInt32{value: nil}
}

func (o OptionalInt32) IsNone() bool {
	return o.value == nil
}

func (o OptionalInt32) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalInt32) Expect(msg string) int32 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalInt32) Unwrap() int32 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalInt32) UnwrapOr(def *int32) int32 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalInt32 func(value *int32) *int32

func (o OptionalInt32) Map(mapperFunc MapFuncOptionalInt32) OptionalInt32 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalInt32{value: newVal}
}

func (o OptionalInt32) MapInto(mapIntoFunc MapIntoFuncOptionalInt32) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalInt32 func(value *int32) *interface{}

func (o OptionalInt32) Set(value int32) OptionalInt32 {
	o.value = &value
	return o
}

func (o *OptionalInt32) SetMutate(value int32) {
	o.value = &value
}
