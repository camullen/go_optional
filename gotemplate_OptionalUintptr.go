// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalUintptr struct {
	value *uintptr
}

func NewOptionalUintptr(v uintptr) OptionalUintptr {
	return OptionalUintptr{value: &v}
}

func NoneOptionalUintptr() OptionalUintptr {
	return OptionalUintptr{value: nil}
}

func (o OptionalUintptr) IsNone() bool {
	return o.value == nil
}

func (o OptionalUintptr) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalUintptr) Expect(msg string) uintptr {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalUintptr) Unwrap() uintptr {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalUintptr) UnwrapOr(def *uintptr) uintptr {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalUintptr func(value *uintptr) *uintptr

func (o OptionalUintptr) Map(mapperFunc MapFuncOptionalUintptr) OptionalUintptr {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalUintptr{value: newVal}
}

func (o OptionalUintptr) MapInto(mapIntoFunc MapIntoFuncOptionalUintptr) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalUintptr func(value *uintptr) *interface{}

func (o OptionalUintptr) Set(value uintptr) OptionalUintptr {
	o.value = &value
	return o
}

func (o *OptionalUintptr) SetMutate(value uintptr) {
	o.value = &value
}
