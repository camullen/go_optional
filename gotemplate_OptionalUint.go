// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalUint struct {
	value *uint
}

func NewOptionalUint(v uint) OptionalUint {
	return OptionalUint{value: &v}
}

func NoneOptionalUint() OptionalUint {
	return OptionalUint{value: nil}
}

func (o OptionalUint) IsNone() bool {
	return o.value == nil
}

func (o OptionalUint) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalUint) Expect(msg string) uint {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalUint) Unwrap() uint {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalUint) UnwrapOr(def *uint) uint {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalUint func(value *uint) *uint

func (o OptionalUint) Map(mapperFunc MapFuncOptionalUint) OptionalUint {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalUint{value: newVal}
}

func (o OptionalUint) MapInto(mapIntoFunc MapIntoFuncOptionalUint) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalUint func(value *uint) *interface{}

func (o OptionalUint) Set(value uint) OptionalUint {
	o.value = &value
	return o
}

func (o *OptionalUint) SetMutate(value uint) {
	o.value = &value
}
