// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalInt8 struct {
	value *int8
}

func NewOptionalInt8(v int8) OptionalInt8 {
	return OptionalInt8{value: &v}
}

func NoneOptionalInt8() OptionalInt8 {
	return OptionalInt8{value: nil}
}

func (o OptionalInt8) IsNone() bool {
	return o.value == nil
}

func (o OptionalInt8) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalInt8) Expect(msg string) int8 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalInt8) Unwrap() int8 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalInt8) UnwrapOr(def *int8) int8 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalInt8 func(value *int8) *int8

func (o OptionalInt8) Map(mapperFunc MapFuncOptionalInt8) OptionalInt8 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalInt8{value: newVal}
}

func (o OptionalInt8) MapInto(mapIntoFunc MapIntoFuncOptionalInt8) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalInt8 func(value *int8) *interface{}

func (o OptionalInt8) Set(value int8) OptionalInt8 {
	o.value = &value
	return o
}

func (o *OptionalInt8) SetMutate(value int8) {
	o.value = &value
}
