// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalInt64 struct {
	value *int64
}

func NewOptionalInt64(v int64) OptionalInt64 {
	return OptionalInt64{value: &v}
}

func NoneOptionalInt64() OptionalInt64 {
	return OptionalInt64{value: nil}
}

func (o OptionalInt64) IsNone() bool {
	return o.value == nil
}

func (o OptionalInt64) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalInt64) Expect(msg string) int64 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalInt64) Unwrap() int64 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalInt64) UnwrapOr(def *int64) int64 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalInt64 func(value *int64) *int64

func (o OptionalInt64) Map(mapperFunc MapFuncOptionalInt64) OptionalInt64 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalInt64{value: newVal}
}

func (o OptionalInt64) MapInto(mapIntoFunc MapIntoFuncOptionalInt64) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalInt64 func(value *int64) *interface{}

func (o OptionalInt64) Set(value int64) OptionalInt64 {
	o.value = &value
	return o
}

func (o *OptionalInt64) SetMutate(value int64) {
	o.value = &value
}
