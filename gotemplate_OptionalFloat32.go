// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalFloat32 struct {
	value *float32
}

func NewOptionalFloat32(v float32) OptionalFloat32 {
	return OptionalFloat32{value: &v}
}

func NoneOptionalFloat32() OptionalFloat32 {
	return OptionalFloat32{value: nil}
}

func (o OptionalFloat32) IsNone() bool {
	return o.value == nil
}

func (o OptionalFloat32) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalFloat32) Expect(msg string) float32 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalFloat32) Unwrap() float32 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalFloat32) UnwrapOr(def *float32) float32 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalFloat32 func(value *float32) *float32

func (o OptionalFloat32) Map(mapperFunc MapFuncOptionalFloat32) OptionalFloat32 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalFloat32{value: newVal}
}

func (o OptionalFloat32) MapInto(mapIntoFunc MapIntoFuncOptionalFloat32) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalFloat32 func(value *float32) *interface{}

func (o OptionalFloat32) Set(value float32) OptionalFloat32 {
	o.value = &value
	return o
}

func (o *OptionalFloat32) SetMutate(value float32) {
	o.value = &value
}
