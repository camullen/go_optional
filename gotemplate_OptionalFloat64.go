// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalFloat64 struct {
	value *float64
}

func NewOptionalFloat64(v float64) OptionalFloat64 {
	return OptionalFloat64{value: &v}
}

func NoneOptionalFloat64() OptionalFloat64 {
	return OptionalFloat64{value: nil}
}

func (o OptionalFloat64) IsNone() bool {
	return o.value == nil
}

func (o OptionalFloat64) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalFloat64) Expect(msg string) float64 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalFloat64) Unwrap() float64 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalFloat64) UnwrapOr(def *float64) float64 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalFloat64 func(value *float64) *float64

func (o OptionalFloat64) Map(mapperFunc MapFuncOptionalFloat64) OptionalFloat64 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalFloat64{value: newVal}
}

func (o OptionalFloat64) MapInto(mapIntoFunc MapIntoFuncOptionalFloat64) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalFloat64 func(value *float64) *interface{}

func (o OptionalFloat64) Set(value float64) OptionalFloat64 {
	o.value = &value
	return o
}

func (o *OptionalFloat64) SetMutate(value float64) {
	o.value = &value
}
