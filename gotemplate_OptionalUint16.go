// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalUint16 struct {
	value *uint16
}

func NewOptionalUint16(v uint16) OptionalUint16 {
	return OptionalUint16{value: &v}
}

func NoneOptionalUint16() OptionalUint16 {
	return OptionalUint16{value: nil}
}

func (o OptionalUint16) IsNone() bool {
	return o.value == nil
}

func (o OptionalUint16) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalUint16) Expect(msg string) uint16 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalUint16) Unwrap() uint16 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalUint16) UnwrapOr(def *uint16) uint16 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalUint16 func(value *uint16) *uint16

func (o OptionalUint16) Map(mapperFunc MapFuncOptionalUint16) OptionalUint16 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalUint16{value: newVal}
}

func (o OptionalUint16) MapInto(mapIntoFunc MapIntoFuncOptionalUint16) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalUint16 func(value *uint16) *interface{}

func (o OptionalUint16) Set(value uint16) OptionalUint16 {
	o.value = &value
	return o
}

func (o *OptionalUint16) SetMutate(value uint16) {
	o.value = &value
}
