// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalComplex128 struct {
	value *complex128
}

func NewOptionalComplex128(v complex128) OptionalComplex128 {
	return OptionalComplex128{value: &v}
}

func NoneOptionalComplex128() OptionalComplex128 {
	return OptionalComplex128{value: nil}
}

func (o OptionalComplex128) IsNone() bool {
	return o.value == nil
}

func (o OptionalComplex128) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalComplex128) Expect(msg string) complex128 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalComplex128) Unwrap() complex128 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalComplex128) UnwrapOr(def *complex128) complex128 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalComplex128 func(value *complex128) *complex128

func (o OptionalComplex128) Map(mapperFunc MapFuncOptionalComplex128) OptionalComplex128 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalComplex128{value: newVal}
}

func (o OptionalComplex128) MapInto(mapIntoFunc MapIntoFuncOptionalComplex128) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalComplex128 func(value *complex128) *interface{}

func (o OptionalComplex128) Set(value complex128) OptionalComplex128 {
	o.value = &value
	return o
}

func (o *OptionalComplex128) SetMutate(value complex128) {
	o.value = &value
}
