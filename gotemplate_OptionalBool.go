// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalBool struct {
	value *bool
}

func NewOptionalBool(v bool) OptionalBool {
	return OptionalBool{value: &v}
}

func NoneOptionalBool() OptionalBool {
	return OptionalBool{value: nil}
}

func (o OptionalBool) IsNone() bool {
	return o.value == nil
}

func (o OptionalBool) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalBool) Expect(msg string) bool {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalBool) Unwrap() bool {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalBool) UnwrapOr(def *bool) bool {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalBool func(value *bool) *bool

func (o OptionalBool) Map(mapperFunc MapFuncOptionalBool) OptionalBool {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalBool{value: newVal}
}

func (o OptionalBool) MapInto(mapIntoFunc MapIntoFuncOptionalBool) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalBool func(value *bool) *interface{}

func (o OptionalBool) Set(value bool) OptionalBool {
	o.value = &value
	return o
}

func (o *OptionalBool) SetMutate(value bool) {
	o.value = &value
}
