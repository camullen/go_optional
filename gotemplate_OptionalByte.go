// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalByte struct {
	value *byte
}

func NewOptionalByte(v byte) OptionalByte {
	return OptionalByte{value: &v}
}

func NoneOptionalByte() OptionalByte {
	return OptionalByte{value: nil}
}

func (o OptionalByte) IsNone() bool {
	return o.value == nil
}

func (o OptionalByte) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalByte) Expect(msg string) byte {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalByte) Unwrap() byte {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalByte) UnwrapOr(def *byte) byte {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalByte func(value *byte) *byte

func (o OptionalByte) Map(mapperFunc MapFuncOptionalByte) OptionalByte {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalByte{value: newVal}
}

func (o OptionalByte) MapInto(mapIntoFunc MapIntoFuncOptionalByte) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalByte func(value *byte) *interface{}

func (o OptionalByte) Set(value byte) OptionalByte {
	o.value = &value
	return o
}

func (o *OptionalByte) SetMutate(value byte) {
	o.value = &value
}
