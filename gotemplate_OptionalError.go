// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalError struct {
	value *error
}

func NewOptionalError(v error) OptionalError {
	return OptionalError{value: &v}
}

func NoneOptionalError() OptionalError {
	return OptionalError{value: nil}
}

func (o OptionalError) IsNone() bool {
	return o.value == nil
}

func (o OptionalError) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalError) Expect(msg string) error {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalError) Unwrap() error {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalError) UnwrapOr(def *error) error {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalError func(value *error) *error

func (o OptionalError) Map(mapperFunc MapFuncOptionalError) OptionalError {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalError{value: newVal}
}

func (o OptionalError) MapInto(mapIntoFunc MapIntoFuncOptionalError) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalError func(value *error) *interface{}

func (o OptionalError) Set(value error) OptionalError {
	o.value = &value
	return o
}

func (o *OptionalError) SetMutate(value error) {
	o.value = &value
}
