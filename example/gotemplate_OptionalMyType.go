// Code generated by gotemplate. DO NOT EDIT.

package example

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalMyType struct {
	value *MyType
}

func NewOptionalMyType(v *MyType) OptionalMyType {
	return OptionalMyType{value: v}
}

func (o OptionalMyType) IsNone() bool {
	return o.value == nil
}

func (o OptionalMyType) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalMyType) Expect(msg string) *MyType {
	if o.IsNone() {
		panic(msg)
	}
	return o.value
}

func (o OptionalMyType) Unwrap() *MyType {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalMyType) UnwrapOr(def *MyType) *MyType {
	if o.IsNone() {
		return def
	}
	return o.value
}

type MapFuncOptionalMyType func(value *MyType) *MyType

func (o OptionalMyType) Map(mapperFunc MapFuncOptionalMyType) OptionalMyType {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return NewOptionalMyType(newVal)
}

func (o OptionalMyType) MapInto(mapIntoFunc MapIntoFuncOptionalMyType) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NewOptionalGeneric(nil)
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalMyType func(value *MyType) *interface{}

func (o OptionalMyType) Set(value *MyType) OptionalMyType {
	o.value = value
	return o
}

func (o *OptionalMyType) Mutate(value *MyType) {
	o.value = value
}
