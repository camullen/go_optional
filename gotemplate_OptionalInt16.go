// Code generated by gotemplate. DO NOT EDIT.

package go_optional

import "github.com/camullen/go_optional/generic"

// template type Optional(A)

type OptionalInt16 struct {
	value *int16
}

func NewOptionalInt16(v int16) OptionalInt16 {
	return OptionalInt16{value: &v}
}

func NoneOptionalInt16() OptionalInt16 {
	return OptionalInt16{value: nil}
}

func (o OptionalInt16) IsNone() bool {
	return o.value == nil
}

func (o OptionalInt16) IsSome() bool {
	return !o.IsNone()
}

func (o OptionalInt16) Expect(msg string) int16 {
	if o.IsNone() {
		panic(msg)
	}
	return *o.value
}

func (o OptionalInt16) Unwrap() int16 {
	return o.Expect("Optional unwrapped with nil value")
}

func (o OptionalInt16) UnwrapOr(def *int16) int16 {
	if o.IsNone() {
		return *def
	}
	return *o.value
}

type MapFuncOptionalInt16 func(value *int16) *int16

func (o OptionalInt16) Map(mapperFunc MapFuncOptionalInt16) OptionalInt16 {
	if o.IsNone() {
		return o
	}

	newVal := mapperFunc(o.value)
	return OptionalInt16{value: newVal}
}

func (o OptionalInt16) MapInto(mapIntoFunc MapIntoFuncOptionalInt16) generic.OptionalGeneric {
	if o.IsNone() {
		return generic.NoneOptionalGeneric()
	}
	result := mapIntoFunc(o.value)
	return generic.NewOptionalGeneric(result)
}

type MapIntoFuncOptionalInt16 func(value *int16) *interface{}

func (o OptionalInt16) Set(value int16) OptionalInt16 {
	o.value = &value
	return o
}

func (o *OptionalInt16) SetMutate(value int16) {
	o.value = &value
}
